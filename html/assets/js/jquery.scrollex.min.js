/* jquery.scrollex v0.2.1 | (c) @ajlkn | github.com/ajlkn/jquery.scrollex | MIT licensed */
!function(t) {
    function e(t, e, n) {
        // Converts values like '50%', '50vh', or '50px' to numbers.
        return "string" == typeof t && (
            "%" == t.slice(-1) ? t = parseInt(t.substring(0, t.length - 1)) / 100 * e :
                "vh" == t.slice(-2) ? t = parseInt(t.substring(0, t.length - 2)) / 100 * n :
                    "px" == t.slice(-2) && (t = parseInt(t.substring(0, t.length - 2)))
        ), t;
    }

    var n = t(window),
        i = 1,
        o = {}; // To hold scrollex instances

    // Handle the scroll event
    n.on("scroll", function() {
        var e = n.scrollTop();
        t.map(o, function(t) {
            window.clearTimeout(t.timeoutId);
            t.timeoutId = window.setTimeout(function() {
                t.handler(e);
            }, t.options.delay);
        });
    }).on("load", function() {
        n.trigger("scroll");
    });

    // Define the main scrollex function
    jQuery.fn.scrollex = function(l) {
        var s = t(this);

        // If no elements, return
        if (0 == this.length) return s;

        // Handle multiple elements
        if (this.length > 1) {
            for (var r = 0; r < this.length; r++) t(this[r]).scrollex(l);
            return s;
        }

        // Prevent duplicate scrollex bindings
        if (s.data("_scrollexId")) return s;

        var a, u, h, c, p;

        // Set default options
        switch (a = i++, u = jQuery.extend({
            top: 0,
            bottom: 0,
            delay: 0,
            mode: "default",
            enter: null,
            leave: null,
            initialize: null,
            terminate: null,
            scroll: null
        }, l), u.mode) {
            case "top":
                h = function(t, e, n, i, o) { return t >= i && o >= t };
                break;
            case "bottom":
                h = function(t, e, n, i, o) { return n >= i && o >= n };
                break;
            case "middle":
                h = function(t, e, n, i, o) { return e >= i && o >= e };
                break;
            case "top-only":
                h = function(t, e, n, i, o) { return i >= t && n >= i };
                break;
            case "bottom-only":
                h = function(t, e, n, i, o) { return n >= o && o >= t };
                break;
            default:
            case "default":
                h = function(t, e, n, i, o) { return n >= i && o >= t };
        }

        // Define the handler function
        c = function(t) {
            var i, o, l, s, r, a, u = this.state,
                h = false,
                c = this.$element.offset();

            // Calculate the visibility state of the element
            i = n.height();
            o = t + i / 2;
            l = t + i;
            s = this.$element.outerHeight();
            r = c.top + e(this.options.top, s, i);
            a = c.top + s - e(this.options.bottom, s, i);

            h = this.test(t, o, l, r, a);

            // Trigger the events if state changes
            if (h != u) {
                this.state = h;
                h ? this.options.enter && this.options.enter.apply(this.element) : this.options.leave && this.options.leave.apply(this.element);
            }

            // Apply scroll event callback
            this.options.scroll && this.options.scroll.apply(this.element, [(o - r) / (a - r)]);
        };

        // Create the scrollex instance
        p = {
            id: a,
            options: u,
            test: h,
            handler: c,
            state: null,
            element: this,
            $element: s,
            timeoutId: null
        };

        o[a] = p;

        // Set the scrollex instance ID
        s.data("_scrollexId", p.id);

        // Call the initialize callback if provided
        p.options.initialize && p.options.initialize.apply(this);

        return s;
    };

    // Define the unscrollex function to remove scrollex instances
    jQuery.fn.unscrollex = function() {
        var e = t(this);
        if (0 == this.length) return e;
        if (this.length > 1) {
            for (var n = 0; n < this.length; n++) t(this[n]).unscrollex();
            return e;
        }
        var i, l;
        if (i = e.data("_scrollexId")) {
            l = o[i];
            window.clearTimeout(l.timeoutId);
            delete o[i];
            e.removeData("_scrollexId");
            l.options.terminate && l.options.terminate.apply(this);
        }
        return e;
    };
}(jQuery);
